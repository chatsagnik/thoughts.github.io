<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Pedagogy on Theoreticles</title>
    <link>http://localhost:1313/categories/pedagogy/</link>
    <description>Recent content in Pedagogy on Theoreticles</description>
    <generator>Hugo</generator>
    <language>en-us</language>
    <lastBuildDate>Sat, 01 Apr 2023 12:03:46 +0530</lastBuildDate>
    <atom:link href="http://localhost:1313/categories/pedagogy/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>$q$-ary Lattices</title>
      <link>http://localhost:1313/posts/lattices1/</link>
      <pubDate>Sat, 01 Apr 2023 12:03:46 +0530</pubDate>
      <guid>http://localhost:1313/posts/lattices1/</guid>
      <description>&lt;p&gt;In this post, we discuss an important class of algebraic structures known as $q$-ary lattices that are central to lattice-based cryptographic primitives.&lt;/p&gt;&#xA;&lt;h2 id=&#34;hardness-of-problems&#34;&gt;Hardness of problems&lt;/h2&gt;&#xA;&lt;p&gt;Computational hardness usually revolves around problems with &lt;strong&gt;worst-case hardness&lt;/strong&gt; guarantees since we want to design algorithms that run efficiently even on the worst possible input.&lt;/p&gt;&#xA;&lt;p&gt;On the other hand, cryptographic schemes require security guarantees for random keys. Therefore, cryptographic applications require problems with &lt;strong&gt;average-case hardness&lt;/strong&gt; guarantees.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Quantum Query Upper Bounds based on Classical Decision Trees</title>
      <link>http://localhost:1313/posts/quantumqueryupperbound1/</link>
      <pubDate>Wed, 01 Mar 2023 12:04:49 +0530</pubDate>
      <guid>http://localhost:1313/posts/quantumqueryupperbound1/</guid>
      <description>&lt;h1 id=&#34;introduction&#34;&gt;Introduction&lt;/h1&gt;&#xA;&lt;p&gt;In many areas of theoretical computer science, we come across various problems where we can exploit structures in the problem to obtain quantum speedups over known classical algorithms.&lt;/p&gt;&#xA;&lt;p&gt;Examples of this include the famous Shor&amp;rsquo;s algorithm (Shor95 &lt;sup id=&#34;fnref:1&#34;&gt;&lt;a href=&#34;#fn:1&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;1&lt;/a&gt;&lt;/sup&gt;) which allows us to compute discrete log or factor integers efficiently, while there are no known classical algorithms that do the same.&lt;/p&gt;&#xA;&lt;p&gt;In this vein, the central question addressed by &lt;strong&gt;CMP22&lt;/strong&gt; &lt;sup id=&#34;fnref:2&#34;&gt;&lt;a href=&#34;#fn:2&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;2&lt;/a&gt;&lt;/sup&gt; is as follows:&lt;/p&gt;</description>
    </item>
    <item>
      <title>An Introduction to Reductions</title>
      <link>http://localhost:1313/posts/reductions/</link>
      <pubDate>Sun, 17 Jul 2022 11:51:18 +0530</pubDate>
      <guid>http://localhost:1313/posts/reductions/</guid>
      <description>&lt;p&gt;&lt;em&gt;This post assumes basic familiarity with Turing machines, P, NP, NP-completeness, decidability, and undecidability. Don&amp;rsquo;t hesitate to contact me via email if you need further clarification. Without further ado, let&amp;rsquo;s dive in.&lt;/em&gt;&lt;/p&gt;&#xA;&lt;h1 id=&#34;introduction&#34;&gt;Introduction&lt;/h1&gt;&#xA;&lt;h2 id=&#34;why-do-we-need-reductions&#34;&gt;Why do we need reductions?&lt;/h2&gt;&#xA;&lt;p&gt;From Archimedes terrorizing the good folk of ancient Syracuse to Newton watching apples fall during a medieval plague, science has always progressed one &amp;lsquo;Eureka!&amp;rsquo; at a time. Romantic as these anecdotes may be, for mathematics, we can hardly look to Mother Nature for providing us the key insight to our proofs.&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
